using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class PuzzleManager1 : MonoBehaviour
{
    public GameObject[] puzzlePiecesSet1,puzzlePiecesSet2,puzzlePiecesSet3,puzzlePiecesSet4,puzzlePiecesSet5;

    public Transform[] puzzleSlots;
    public Image backgroundImageSet1,backgroundImageSet2,backgroundImageSet3,backgroundImageSet4,backgroundImageSet5;

    public GameObject dialoguePanel,scoreRecordPanel;
    public Image dialogueImage,dialogueFrame;
    public TextMeshProUGUI dialogueText,dialogueNameText,scoreRecordText;
    public Button nextButton,closeRecordButton; // nextButton 元件

    public TextMeshProUGUI scoreText;
    private int score = 0;
    private bool isSet1Completed = false;
    private bool isSet2Completed = false;
    private bool isSet3Completed = false;
    private bool isSet4Completed = false;
    private bool isSet5Completed = false;

    public Sprite[] dialogueImages; // 用於對話框的圖像
    public string[] dialogueTexts,dialogueNames;   // 用於顯示的文本和名稱
    public RawImage XUNZHANG; // 新增 RawImage UI 元件，用於顯示勳章
    public Sprite XUNZHANG1,XUNZHANG2,XUNZHANG3;
    
    public GameObject informPanel; // InformPanel面板
    public Image informImage,ImageLog;      // 用於顯示人物圖像的UI Image和log
    public TextMeshProUGUI informText; // 用於顯示TMP資訊內容
    public Button informCloseButton;   // 關閉面板按鈕



    void Start()
    {
        backgroundImageSet1.enabled = false;
        backgroundImageSet2.enabled = false;
        backgroundImageSet3.enabled = false;
        backgroundImageSet4.enabled = false;
        backgroundImageSet5.enabled = false;

        HidePuzzlePieces(puzzlePiecesSet1);
        HidePuzzlePieces(puzzlePiecesSet2);
        HidePuzzlePieces(puzzlePiecesSet3);
        HidePuzzlePieces(puzzlePiecesSet4);
        HidePuzzlePieces(puzzlePiecesSet5);

        dialoguePanel.SetActive(false);
        nextButton.gameObject.SetActive(false); // 初始化時隱藏 nextButton
        scoreText.enabled = false;

        scoreRecordPanel.SetActive(false); // 開始時隱藏紀錄面板
        closeRecordButton.onClick.AddListener(CloseScoreRecordPanel); // 設定按鈕事件

        score = PlayerPrefs.GetInt("PlayerScore", 0);
        UpdateScoreText();
        UpdateXunZhangImage(); // 初始化時更新勳章

        informPanel.SetActive(true); // 初始化時顯示InformPanel
        informCloseButton.onClick.AddListener(CloseInformPanel); // 設定關閉按鈕事件
    }

    private void HidePuzzlePieces(GameObject[] puzzlePieces)
    {
        foreach (GameObject piece in puzzlePieces)
        {
            piece.SetActive(false);
            piece.GetComponent<Draggable1>().enabled = false;
        }
    }

    public void OnImageScanned(int imageTargetID)
    {
        backgroundImageSet1.enabled = false;
        backgroundImageSet2.enabled = false;
        backgroundImageSet3.enabled = false;
        backgroundImageSet4.enabled = false;
        backgroundImageSet5.enabled = false;

        scoreText.enabled = true;
        UpdateScoreText();

        if (imageTargetID == 1 && !isSet1Completed)
        {
            ActivatePuzzlePieces(puzzlePiecesSet1);
            backgroundImageSet1.enabled = true;
        }
        else if (imageTargetID == 2 && isSet1Completed && !isSet2Completed)
        {
            ActivatePuzzlePieces(puzzlePiecesSet2);
            backgroundImageSet2.enabled = true;
        }
        else if (imageTargetID == 3 && isSet1Completed && isSet2Completed && !isSet3Completed)
        {
            ActivatePuzzlePieces(puzzlePiecesSet3);
            backgroundImageSet3.enabled = true;
        }
        else if (imageTargetID == 4 && isSet1Completed && isSet2Completed && isSet3Completed && !isSet4Completed)
        {
            ActivatePuzzlePieces(puzzlePiecesSet4);
            backgroundImageSet4.enabled = true;
        }
        else if (imageTargetID == 5 && isSet1Completed && isSet2Completed && isSet3Completed && isSet4Completed && !isSet5Completed)
        {
            ActivatePuzzlePieces(puzzlePiecesSet5);
            backgroundImageSet5.enabled = true;
        }
    }

    private void ActivatePuzzlePieces(GameObject[] puzzlePieces)
    {
        foreach (GameObject piece in puzzlePieces)
        {
            piece.SetActive(true);
            piece.GetComponent<Draggable1>().enabled = true;
        }
    }

    private void UpdateScoreText()
    {
        scoreText.text = " " + score;
        PlayerPrefs.SetInt("PlayerScore", score);
        PlayerPrefs.Save();
    }

    private void UpdateXunZhangImage() //測試勳章隨著分數變化
{
    if (score >= 100)
    {
        XUNZHANG.texture = XUNZHANG3.texture;
        XUNZHANG.rectTransform.sizeDelta = new Vector2(300, XUNZHANG.rectTransform.sizeDelta.y); // 調整寬度為 300
    }
    else if (score >= 40)
    {
        XUNZHANG.texture = XUNZHANG2.texture;
        XUNZHANG.rectTransform.sizeDelta = new Vector2(200, XUNZHANG.rectTransform.sizeDelta.y); // 還原尺寸 (假設 200 是原來的寬度)
    }
    else
    {
        XUNZHANG.texture = XUNZHANG1.texture;
        XUNZHANG.rectTransform.sizeDelta = new Vector2(200, XUNZHANG.rectTransform.sizeDelta.y); // 還原尺寸 (假設 200 是原來的寬度)
    }
}
    public void CheckCorrectPlacement()
    {
        bool allCorrect = true;
        GameObject[] currentPuzzlePieces;

        if (!isSet1Completed)
            currentPuzzlePieces = puzzlePiecesSet1;
        else if (!isSet2Completed)
            currentPuzzlePieces = puzzlePiecesSet2;
        else if (!isSet3Completed)
            currentPuzzlePieces = puzzlePiecesSet3;
        else if (!isSet4Completed)
            currentPuzzlePieces = puzzlePiecesSet4;
        else
            currentPuzzlePieces = puzzlePiecesSet5;

        foreach (GameObject piece in currentPuzzlePieces)
        {
            if (!piece.GetComponent<Draggable1>().isInCorrectPosition)
            {
                allCorrect = false;
                break;
            }
        }

        if (allCorrect)
        {
            score += 20;
            UpdateScoreText();
            UpdateXunZhangImage();
            if (!isSet1Completed)
            {
                isSet1Completed = true;
                ShowDialogue(0);
                HidePuzzlePieces(puzzlePiecesSet1);
                backgroundImageSet1.enabled = false;
            }
            else if (!isSet2Completed)
            {
                isSet2Completed = true;
                ShowDialogue(1);
                HidePuzzlePieces(puzzlePiecesSet2);
                backgroundImageSet2.enabled = false;
            }
            else if (!isSet3Completed)
            {
                isSet3Completed = true;
                ShowDialogue(2);
                HidePuzzlePieces(puzzlePiecesSet3);
                backgroundImageSet3.enabled = false;
            }
            else if (!isSet4Completed)
            {
                isSet4Completed = true;
                ShowDialogue(3);
                HidePuzzlePieces(puzzlePiecesSet4);
                backgroundImageSet4.enabled = false;
            }
            else
            {
                isSet5Completed = true;
                ShowDialogue(4);
                HidePuzzlePieces(puzzlePiecesSet5);
                backgroundImageSet5.enabled = false;
                Debug.Log("遊戲完成！");
                // ShowScoreRecord(); 正式版時使用
            }
        }
    }

    private void ShowDialogue(int index)
    {
        dialogueImage.sprite = dialogueImages[index]; // 設定對話圖像
        dialogueText.text = dialogueTexts[index]; // 設定對話文本
        dialogueNameText.text = dialogueNames[index]; // 設定對話名稱
        dialoguePanel.SetActive(true); // 顯示對話面板
        nextButton.gameObject.SetActive(true); // 顯示 nextButton

        if (isSet1Completed)  // 在第一關拼圖完成後顯示 dialogueFrame，並保持顯示
        {
            dialogueFrame.enabled = true;
        }
    }

    public void OnNextButtonClicked()
    {
        // 隱藏對話內容
        dialogueImage.sprite = null;
        dialogueText.text = "";
        dialogueNameText.text = "";
        dialoguePanel.SetActive(false);
        nextButton.gameObject.SetActive(false);

        // 只有當遊戲結束時才隱藏 dialogueFrame
        if (isSet1Completed) //使用拼圖1進行測試
        {
            dialogueFrame.enabled = false;
            ShowScoreRecord(); //顯示紀錄面板
        }
    }

    public void ShowScoreRecord()  //打開紀錄面板
    {
        scoreRecordPanel.SetActive(true);

        // 取得本地保存的分數紀錄
        int savedScore = PlayerPrefs.GetInt("PlayerScore", 0);
        scoreRecordText.text = "當前分數紀錄: " + savedScore;
    }

    public void CloseScoreRecordPanel()  //關閉紀錄面板
    {
        scoreRecordPanel.SetActive(false);
    }

     private void ShowInformPanel() // 顯示資訊面板
    {
        informPanel.SetActive(true);
    }

    private void CloseInformPanel()     // 關閉資訊面板
    {
        informPanel.SetActive(false);
    }
}
